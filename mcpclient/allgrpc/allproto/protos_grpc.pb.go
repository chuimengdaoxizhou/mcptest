// Code generated by protoc-gen-go-allgrpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-allgrpc v1.5.1
// - protoc             v4.25.3
// source: allproto/protos.proto

package vertor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the allgrpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataManagement_GetDatabyPrompt_FullMethodName = "/vertor.DataManagement/getDatabyPrompt"
	DataManagement_Updatabypath_FullMethodName    = "/vertor.DataManagement/updatabypath"
)

// DataManagementClient is the client API for DataManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataManagementClient interface {
	GetDatabyPrompt(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Updatabypath(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type dataManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewDataManagementClient(cc grpc.ClientConnInterface) DataManagementClient {
	return &dataManagementClient{cc}
}

func (c *dataManagementClient) GetDatabyPrompt(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, DataManagement_GetDatabyPrompt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManagementClient) Updatabypath(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, DataManagement_Updatabypath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataManagementServer is the server API for DataManagement service.
// All implementations must embed UnimplementedDataManagementServer
// for forward compatibility.
type DataManagementServer interface {
	GetDatabyPrompt(context.Context, *Request) (*Response, error)
	Updatabypath(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedDataManagementServer()
}

// UnimplementedDataManagementServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataManagementServer struct{}

func (UnimplementedDataManagementServer) GetDatabyPrompt(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabyPrompt not implemented")
}
func (UnimplementedDataManagementServer) Updatabypath(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Updatabypath not implemented")
}
func (UnimplementedDataManagementServer) mustEmbedUnimplementedDataManagementServer() {}
func (UnimplementedDataManagementServer) testEmbeddedByValue()                        {}

// UnsafeDataManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataManagementServer will
// result in compilation errors.
type UnsafeDataManagementServer interface {
	mustEmbedUnimplementedDataManagementServer()
}

func RegisterDataManagementServer(s grpc.ServiceRegistrar, srv DataManagementServer) {
	// If the following call pancis, it indicates UnimplementedDataManagementServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataManagement_ServiceDesc, srv)
}

func _DataManagement_GetDatabyPrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagementServer).GetDatabyPrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManagement_GetDatabyPrompt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagementServer).GetDatabyPrompt(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManagement_Updatabypath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManagementServer).Updatabypath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManagement_Updatabypath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManagementServer).Updatabypath(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// DataManagement_ServiceDesc is the grpc.ServiceDesc for DataManagement service.
// It's only intended for direct use with allgrpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vertor.DataManagement",
	HandlerType: (*DataManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getDatabyPrompt",
			Handler:    _DataManagement_GetDatabyPrompt_Handler,
		},
		{
			MethodName: "updatabypath",
			Handler:    _DataManagement_Updatabypath_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "allproto/protos.proto",
}
